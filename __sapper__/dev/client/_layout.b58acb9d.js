import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, e as element, t as text, a as space, b as claim_element, f as children, j as claim_text, g as detach_dev, h as claim_space, k as attr_dev, U as null_to_empty, l as add_location, m as insert_dev, n as append_dev, u as update_slot, p as transition_in, q as transition_out } from './client.33602f97.js';

/* src/routes/settings/_layout.svelte generated by Svelte v3.38.1 */

const file = "src/routes/settings/_layout.svelte";

function create_fragment(ctx) {
	let div;
	let nav;
	let ul;
	let li0;
	let a0;
	let t0;
	let a0_class_value;
	let t1;
	let li1;
	let a1;
	let t2;
	let a1_class_value;
	let t3;
	let li2;
	let a2;
	let t4;
	let a2_class_value;
	let t5;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	const block = {
		c: function create() {
			div = element("div");
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("Personal Information");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("Translators");
			t3 = space();
			li2 = element("li");
			a2 = element("a");
			t4 = text("Security");
			t5 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			nav = claim_element(div_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { class: true, href: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Personal Information");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { class: true, href: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Translators");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "Security");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "class", a0_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "personal" ? "selected" : "") + " svelte-1bldad7"));
			attr_dev(a0, "href", "settings/personal");
			add_location(a0, file, 30, 8, 594);
			attr_dev(li0, "class", "svelte-1bldad7");
			add_location(li0, file, 29, 6, 581);
			attr_dev(a1, "class", a1_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "translators" ? "selected" : "") + " svelte-1bldad7"));
			attr_dev(a1, "href", "settings/translators");
			add_location(a1, file, 35, 8, 749);
			attr_dev(li1, "class", "svelte-1bldad7");
			add_location(li1, file, 34, 6, 736);
			attr_dev(a2, "class", a2_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "security" ? "selected" : "") + " svelte-1bldad7"));
			attr_dev(a2, "href", "settings/security");
			add_location(a2, file, 40, 8, 901);
			attr_dev(li2, "class", "svelte-1bldad7");
			add_location(li2, file, 39, 6, 888);
			attr_dev(ul, "class", "svelte-1bldad7");
			add_location(ul, file, 28, 4, 570);
			attr_dev(nav, "class", "sub-nav borderline svelte-1bldad7");
			add_location(nav, file, 27, 2, 533);
			attr_dev(div, "class", "p-pages svelte-1bldad7");
			add_location(div, file, 26, 0, 509);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, nav);
			append_dev(nav, ul);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t2);
			append_dev(ul, t3);
			append_dev(ul, li2);
			append_dev(li2, a2);
			append_dev(a2, t4);
			append_dev(div, t5);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*segment*/ 1 && a0_class_value !== (a0_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "personal" ? "selected" : "") + " svelte-1bldad7"))) {
				attr_dev(a0, "class", a0_class_value);
			}

			if (!current || dirty & /*segment*/ 1 && a1_class_value !== (a1_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "translators" ? "selected" : "") + " svelte-1bldad7"))) {
				attr_dev(a1, "class", a1_class_value);
			}

			if (!current || dirty & /*segment*/ 1 && a2_class_value !== (a2_class_value = "" + (null_to_empty(/*segment*/ ctx[0] === "security" ? "selected" : "") + " svelte-1bldad7"))) {
				attr_dev(a2, "class", a2_class_value);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Layout", slots, ['default']);
	let { segment } = $$props;
	const writable_props = ["segment"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ segment });

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [segment, $$scope, slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*segment*/ ctx[0] === undefined && !("segment" in props)) {
			console.warn("<Layout> was created without expected prop 'segment'");
		}
	}

	get segment() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Layout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2xheW91dC5iNThhY2I5ZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9zZXR0aW5ncy9fbGF5b3V0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgXCIuLi8uLi9zdHlsZS9lbGVtZW50cy9TdWJuYXYuc2Nzc1wiO1xuLnNlbGVjdGVkIHtcbiAgY29sb3I6IHJnYigyNTUsIDYyLCAwKTtcbn1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgbGV0IHNlZ21lbnQ7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInAtcGFnZXNcIj5cbiAgPG5hdiBjbGFzcz1cInN1Yi1uYXYgYm9yZGVybGluZVwiPlxuICAgIDx1bD5cbiAgICAgIDxsaT5cbiAgICAgICAgPGFcbiAgICAgICAgICBjbGFzcz1cIntzZWdtZW50ID09PSAncGVyc29uYWwnID8gJ3NlbGVjdGVkJyA6ICcnfVwiXG4gICAgICAgICAgaHJlZj1cInNldHRpbmdzL3BlcnNvbmFsXCI+UGVyc29uYWwgSW5mb3JtYXRpb248L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzPVwie3NlZ21lbnQgPT09ICd0cmFuc2xhdG9ycycgPyAnc2VsZWN0ZWQnIDogJyd9XCJcbiAgICAgICAgICBocmVmPVwic2V0dGluZ3MvdHJhbnNsYXRvcnNcIj5UcmFuc2xhdG9yczwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGk+XG4gICAgICAgIDxhXG4gICAgICAgICAgY2xhc3M9XCJ7c2VnbWVudCA9PT0gJ3NlY3VyaXR5JyA/ICdzZWxlY3RlZCcgOiAnJ31cIlxuICAgICAgICAgIGhyZWY9XCJzZXR0aW5ncy9zZWN1cml0eVwiPlNlY3VyaXR5PC9hPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L25hdj5cbiAgPHNsb3QgLz5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswRUFnQmtCLEdBQU8sUUFBSyxVQUFVLEdBQUcsVUFBVSxHQUFHLEVBQUU7Ozs7OzBFQUt4QyxHQUFPLFFBQUssYUFBYSxHQUFHLFVBQVUsR0FBRyxFQUFFOzs7OzswRUFLM0MsR0FBTyxRQUFLLFVBQVUsR0FBRyxVQUFVLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lIQVZ4QyxHQUFPLFFBQUssVUFBVSxHQUFHLFVBQVUsR0FBRyxFQUFFOzs7O2lIQUt4QyxHQUFPLFFBQUssYUFBYSxHQUFHLFVBQVUsR0FBRyxFQUFFOzs7O2lIQUszQyxHQUFPLFFBQUssVUFBVSxHQUFHLFVBQVUsR0FBRyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FsQi9DLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
