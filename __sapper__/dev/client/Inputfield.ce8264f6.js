import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, b as claim_element, f as children, j as claim_text, g as detach_dev, h as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, T as set_input_value, N as listen_dev, o as set_data_dev, L as noop } from './client.33602f97.js';

/* src/components/Inputfield.svelte generated by Svelte v3.38.1 */

const file = "src/components/Inputfield.svelte";

function create_fragment(ctx) {
	let div2;
	let div0;
	let p;
	let t0;
	let t1;
	let div1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			t0 = text(/*label*/ ctx[1]);
			t1 = space();
			div1 = element("div");
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, /*label*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			input = claim_element(div1_nodes, "INPUT", {
				placeholder: true,
				type: true,
				class: true
			});

			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1nhben6");
			add_location(p, file, 31, 4, 676);
			attr_dev(div0, "class", "inputfield_label svelte-1nhben6");
			add_location(div0, file, 30, 2, 641);
			attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "svelte-1nhben6");
			add_location(input, file, 34, 4, 737);
			attr_dev(div1, "class", "inputfield_input svelte-1nhben6");
			add_location(div1, file, 33, 2, 702);
			attr_dev(div2, "class", "inputfield svelte-1nhben6");
			add_location(div2, file, 29, 0, 614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, p);
			append_dev(p, t0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, input);
			set_input_value(input, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1]);

			if (dirty & /*placeholder*/ 4) {
				attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Inputfield", slots, []);
	let { label } = $$props;
	let { placeholder } = $$props;
	let { value } = $$props;
	const writable_props = ["label", "placeholder", "value"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Inputfield> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({ label, placeholder, value });

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, label, placeholder, input_input_handler];
}

class Inputfield extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { label: 1, placeholder: 2, value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Inputfield",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*label*/ ctx[1] === undefined && !("label" in props)) {
			console.warn("<Inputfield> was created without expected prop 'label'");
		}

		if (/*placeholder*/ ctx[2] === undefined && !("placeholder" in props)) {
			console.warn("<Inputfield> was created without expected prop 'placeholder'");
		}

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<Inputfield> was created without expected prop 'value'");
		}
	}

	get label() {
		throw new Error("<Inputfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Inputfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Inputfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Inputfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Inputfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Inputfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Inputfield as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5wdXRmaWVsZC5jZTgyNjRmNi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvSW5wdXRmaWVsZC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vc3R5bGUvY29tcG9uZW50cy9JbnB1dGZpZWxkLnNjc3NcIjtcbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgbGV0IGxhYmVsO1xuZXhwb3J0IGxldCBwbGFjZWhvbGRlcjtcbi8vIGV4cG9ydCBsZXQgdHlwZTtcbmV4cG9ydCBsZXQgdmFsdWU7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImlucHV0ZmllbGRcIj5cbiAgPGRpdiBjbGFzcz1cImlucHV0ZmllbGRfbGFiZWxcIj5cbiAgICA8cD57bGFiZWx9PC9wPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImlucHV0ZmllbGRfaW5wdXRcIj5cbiAgICA8aW5wdXQgYmluZDp2YWx1ZT1cInt2YWx1ZX1cIiBwbGFjZWhvbGRlcj1cIntwbGFjZWhvbGRlcn1cIiB0eXBlPVwidGV4dFwiIC8+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1QkFhUSxHQUFLOzs7Ozs7Ozs7Ozs7O3NDQUFMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBR2lDLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQUFqQyxHQUFLOzs7Ozs7Ozt1REFIckIsR0FBSzs7O21EQUdpQyxHQUFXOzs7d0RBQWpDLEdBQUs7cUNBQUwsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FYbEIsS0FBSztPQUNMLFdBQVc7T0FFWCxLQUFLOzs7Ozs7OztFQVFRLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
