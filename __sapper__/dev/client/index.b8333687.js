import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, e as element, a as space, t as text, b as claim_element, f as children, g as detach_dev, h as claim_space, j as claim_text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, u as update_slot, o as set_data_dev, p as transition_in, q as transition_out, r as globals, w as onMount, x as goto, y as o, B as Button, z as checkAuth, A as validate_each_argument, C as create_component, D as claim_component, E as mount_component, F as check_outros, G as destroy_component, H as destroy_each, I as empty, J as query_selector_all, K as group_outros } from './client.33602f97.js';
import { T as Title } from './Title.83727d68.js';
import { I as ImageUpload } from './ImageUpload.e684be51.js';

/* src/components/UserCard.svelte generated by Svelte v3.38.1 */

const file$1 = "src/components/UserCard.svelte";

function create_fragment$1(ctx) {
	let div5;
	let div0;
	let t0;
	let div1;
	let t1;
	let div4;
	let div2;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let t6;
	let t7;
	let div3;
	let p2;
	let t8;
	let t9;
	let p3;
	let t10;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div5 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			div1 = element("div");
			t1 = space();
			div4 = element("div");
			div2 = element("div");
			p0 = element("p");
			t2 = text("Name");
			t3 = space();
			p1 = element("p");
			t4 = text(/*firstname*/ ctx[0]);
			t5 = space();
			t6 = text(/*lastname*/ ctx[1]);
			t7 = space();
			div3 = element("div");
			p2 = element("p");
			t8 = text("Email");
			t9 = space();
			p3 = element("p");
			t10 = text(/*email*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div5_nodes);
			div1 = claim_element(div5_nodes, "DIV", { class: true });
			children(div1).forEach(detach_dev);
			t1 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p0 = claim_element(div2_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Name");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			p1 = claim_element(div2_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, /*firstname*/ ctx[0]);
			t5 = claim_space(p1_nodes);
			t6 = claim_text(p1_nodes, /*lastname*/ ctx[1]);
			p1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p2 = claim_element(div3_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, "Email");
			p2_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			p3 = claim_element(div3_nodes, "P", {});
			var p3_nodes = children(p3);
			t10 = claim_text(p3_nodes, /*email*/ ctx[2]);
			p3_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "usercard_content svelte-1vtf1yc");
			add_location(div0, file$1, 37, 2, 802);
			attr_dev(div1, "class", "usercard_border svelte-1vtf1yc");
			add_location(div1, file$1, 40, 2, 857);
			attr_dev(p0, "class", "p-title svelte-1vtf1yc");
			add_location(p0, file$1, 43, 6, 965);
			add_location(p1, file$1, 44, 6, 999);
			attr_dev(div2, "class", "usercard_name svelte-1vtf1yc");
			add_location(div2, file$1, 42, 4, 931);
			attr_dev(p2, "class", "p-title svelte-1vtf1yc");
			add_location(p2, file$1, 47, 6, 1079);
			add_location(p3, file$1, 48, 6, 1114);
			attr_dev(div3, "class", "usercard_email svelte-1vtf1yc");
			add_location(div3, file$1, 46, 4, 1044);
			attr_dev(div4, "class", "usercard_personal svelte-1vtf1yc");
			add_location(div4, file$1, 41, 2, 895);
			attr_dev(div5, "class", "usercard borderline svelte-1vtf1yc");
			add_location(div5, file$1, 36, 0, 766);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			append_dev(div5, t0);
			append_dev(div5, div1);
			append_dev(div5, t1);
			append_dev(div5, div4);
			append_dev(div4, div2);
			append_dev(div2, p0);
			append_dev(p0, t2);
			append_dev(div2, t3);
			append_dev(div2, p1);
			append_dev(p1, t4);
			append_dev(p1, t5);
			append_dev(p1, t6);
			append_dev(div4, t7);
			append_dev(div4, div3);
			append_dev(div3, p2);
			append_dev(p2, t8);
			append_dev(div3, t9);
			append_dev(div3, p3);
			append_dev(p3, t10);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (!current || dirty & /*firstname*/ 1) set_data_dev(t4, /*firstname*/ ctx[0]);
			if (!current || dirty & /*lastname*/ 2) set_data_dev(t6, /*lastname*/ ctx[1]);
			if (!current || dirty & /*email*/ 4) set_data_dev(t10, /*email*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("UserCard", slots, ['default']);
	let { firstname } = $$props;
	let { lastname } = $$props;
	let { email } = $$props;
	const writable_props = ["firstname", "lastname", "email"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<UserCard> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("firstname" in $$props) $$invalidate(0, firstname = $$props.firstname);
		if ("lastname" in $$props) $$invalidate(1, lastname = $$props.lastname);
		if ("email" in $$props) $$invalidate(2, email = $$props.email);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ firstname, lastname, email });

	$$self.$inject_state = $$props => {
		if ("firstname" in $$props) $$invalidate(0, firstname = $$props.firstname);
		if ("lastname" in $$props) $$invalidate(1, lastname = $$props.lastname);
		if ("email" in $$props) $$invalidate(2, email = $$props.email);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [firstname, lastname, email, $$scope, slots];
}

class UserCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { firstname: 0, lastname: 1, email: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserCard",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*firstname*/ ctx[0] === undefined && !("firstname" in props)) {
			console.warn("<UserCard> was created without expected prop 'firstname'");
		}

		if (/*lastname*/ ctx[1] === undefined && !("lastname" in props)) {
			console.warn("<UserCard> was created without expected prop 'lastname'");
		}

		if (/*email*/ ctx[2] === undefined && !("email" in props)) {
			console.warn("<UserCard> was created without expected prop 'email'");
		}
	}

	get firstname() {
		throw new Error("<UserCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set firstname(value) {
		throw new Error("<UserCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lastname() {
		throw new Error("<UserCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lastname(value) {
		throw new Error("<UserCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get email() {
		throw new Error("<UserCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set email(value) {
		throw new Error("<UserCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.38.1 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (60:0) {#if isAuth !== false}
function create_if_block(ctx) {
	let div7;
	let div6;
	let div3;
	let div1;
	let h1;
	let t0;
	let br0;
	let t1;
	let t2;
	let p;
	let t3;
	let br1;
	let t4;
	let br2;
	let t5;
	let t6;
	let div0;
	let button;
	let t7;
	let div2;
	let img;
	let img_src_value;
	let t8;
	let div5;
	let title;
	let t9;
	let div4;
	let current;

	button = new Button({
			props: { label: "About us", isNormal: true },
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[2]);
	title = new Title({ props: { text: "Users" }, $$inline: true });
	let each_value = /*users*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block(ctx);
	}

	const block = {
		c: function create() {
			div7 = element("div");
			div6 = element("div");
			div3 = element("div");
			div1 = element("div");
			h1 = element("h1");
			t0 = text("Welcome to Langon ");
			br0 = element("br");
			t1 = text(" Romanie");
			t2 = space();
			p = element("p");
			t3 = text("We ensure smooth");
			br1 = element("br");
			t4 = text(" cooperation and ");
			br2 = element("br");
			t5 = text(" professional translation");
			t6 = space();
			div0 = element("div");
			create_component(button.$$.fragment);
			t7 = space();
			div2 = element("div");
			img = element("img");
			t8 = space();
			div5 = element("div");
			create_component(title.$$.fragment);
			t9 = space();
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Welcome to Langon ");
			br0 = claim_element(h1_nodes, "BR", {});
			t1 = claim_text(h1_nodes, " Romanie");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "We ensure smooth");
			br1 = claim_element(p_nodes, "BR", {});
			t4 = claim_text(p_nodes, " cooperation and ");
			br2 = claim_element(p_nodes, "BR", {});
			t5 = claim_text(p_nodes, " professional translation");
			p_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(button.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img = claim_element(div2_nodes, "IMG", { src: true, alt: true });
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t8 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			claim_component(title.$$.fragment, div5_nodes);
			t9 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div4_nodes);
			}

			if (each_1_else) {
				each_1_else.l(div4_nodes);
			}

			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file, 64, 32, 1544);
			add_location(h1, file, 64, 10, 1522);
			add_location(br1, file, 66, 28, 1606);
			add_location(br2, file, 66, 51, 1629);
			attr_dev(p, "class", "svelte-1ekn26t");
			add_location(p, file, 65, 10, 1574);
			attr_dev(div0, "class", "home_button svelte-1ekn26t");
			add_location(div0, file, 68, 10, 1686);
			attr_dev(div1, "class", "home_intro svelte-1ekn26t");
			add_location(div1, file, 63, 8, 1487);
			if (img.src !== (img_src_value = "/images/home_picture.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			add_location(img, file, 76, 10, 1923);
			attr_dev(div2, "class", "home_picture svelte-1ekn26t");
			add_location(div2, file, 75, 8, 1886);
			attr_dev(div3, "class", "home svelte-1ekn26t");
			add_location(div3, file, 62, 6, 1460);
			attr_dev(div4, "class", "home_usercard svelte-1ekn26t");
			add_location(div4, file, 81, 8, 2067);
			attr_dev(div5, "class", "home_users svelte-1ekn26t");
			add_location(div5, file, 79, 6, 2003);
			attr_dev(div6, "class", "p-pages");
			add_location(div6, file, 61, 4, 1432);
			attr_dev(div7, "class", "home svelte-1ekn26t");
			add_location(div7, file, 60, 2, 1409);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div7, anchor);
			append_dev(div7, div6);
			append_dev(div6, div3);
			append_dev(div3, div1);
			append_dev(div1, h1);
			append_dev(h1, t0);
			append_dev(h1, br0);
			append_dev(h1, t1);
			append_dev(div1, t2);
			append_dev(div1, p);
			append_dev(p, t3);
			append_dev(p, br1);
			append_dev(p, t4);
			append_dev(p, br2);
			append_dev(p, t5);
			append_dev(div1, t6);
			append_dev(div1, div0);
			mount_component(button, div0, null);
			append_dev(div3, t7);
			append_dev(div3, div2);
			append_dev(div2, img);
			append_dev(div6, t8);
			append_dev(div6, div5);
			mount_component(title, div5, null);
			append_dev(div5, t9);
			append_dev(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}

			if (each_1_else) {
				each_1_else.m(div4, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*users*/ 1) {
				each_value = /*users*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div4, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block(ctx);
					each_1_else.c();
					each_1_else.m(div4, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(title.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(title.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			destroy_component(button);
			destroy_component(title);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(60:0) {#if isAuth !== false}",
		ctx
	});

	return block;
}

// (90:10) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("loading...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "loading...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 90, 12, 2353);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(90:10) {:else}",
		ctx
	});

	return block;
}

// (84:12) <UserCard               firstname="{user.firstname}"               lastname="{user.lastname}"               email="{user.email}">
function create_default_slot(ctx) {
	let imageupload;
	let t;
	let current;
	imageupload = new ImageUpload({ $$inline: true });

	const block = {
		c: function create() {
			create_component(imageupload.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(imageupload.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(imageupload, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(imageupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(imageupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(imageupload, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(84:12) <UserCard               firstname=\\\"{user.firstname}\\\"               lastname=\\\"{user.lastname}\\\"               email=\\\"{user.email}\\\">",
		ctx
	});

	return block;
}

// (83:10) {#each users as user}
function create_each_block(ctx) {
	let usercard;
	let current;

	usercard = new UserCard({
			props: {
				firstname: /*user*/ ctx[3].firstname,
				lastname: /*user*/ ctx[3].lastname,
				email: /*user*/ ctx[3].email,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(usercard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(usercard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(usercard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const usercard_changes = {};
			if (dirty & /*users*/ 1) usercard_changes.firstname = /*user*/ ctx[3].firstname;
			if (dirty & /*users*/ 1) usercard_changes.lastname = /*user*/ ctx[3].lastname;
			if (dirty & /*users*/ 1) usercard_changes.email = /*user*/ ctx[3].email;

			if (dirty & /*$$scope*/ 64) {
				usercard_changes.$$scope = { dirty, ctx };
			}

			usercard.$set(usercard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(usercard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(usercard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(usercard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(83:10) {#each users as user}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let if_block_anchor;
	let current;
	let if_block = /*isAuth*/ ctx[1] !== false && create_if_block(ctx);

	const block = {
		c: function create() {
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-xq99qa\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Langon";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*isAuth*/ ctx[1] !== false) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isAuth*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const result = await this.fetch("http://localhost:8055/items/users");
	let users = await result.json();
	users = users.data;

	// console.log(users);
	return { users };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let isAuth = false;

	//pas nadat de pagina gemount is, mag de checkauth functie lopen. anders is localstorage niet beschikbaar.
	onMount(async () => {
		try {
			$$invalidate(1, isAuth = await checkAuth(["Administrator"]));
		} catch(err) {
			console.log(err);
		}
	});

	let { users } = $$props;
	const writable_props = ["users"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	const click_handler = () => goto("/about");

	$$self.$$set = $$props => {
		if ("users" in $$props) $$invalidate(0, users = $$props.users);
	};

	$$self.$capture_state = () => ({
		preload,
		goto,
		jwt_decode: o,
		Button,
		Title,
		UserCard,
		ImageUpload,
		checkAuth,
		onMount,
		isAuth,
		users
	});

	$$self.$inject_state = $$props => {
		if ("isAuth" in $$props) $$invalidate(1, isAuth = $$props.isAuth);
		if ("users" in $$props) $$invalidate(0, users = $$props.users);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [users, isAuth, click_handler];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { users: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*users*/ ctx[0] === undefined && !("users" in props)) {
			console_1.warn("<Routes> was created without expected prop 'users'");
		}
	}

	get users() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set users(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYjgzMzM2ODcuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VzZXJDYXJkLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuQGltcG9ydCBcIi4uL3N0eWxlL2NvbXBvbmVudHMvVXNlckNhcmQuc2Nzc1wiO1xuPC9zdHlsZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBsZXQgZmlyc3RuYW1lO1xuZXhwb3J0IGxldCBsYXN0bmFtZTtcbmV4cG9ydCBsZXQgZW1haWw7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInVzZXJjYXJkIGJvcmRlcmxpbmVcIj5cbiAgPGRpdiBjbGFzcz1cInVzZXJjYXJkX2NvbnRlbnRcIj5cbiAgICA8c2xvdCAvPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInVzZXJjYXJkX2JvcmRlclwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidXNlcmNhcmRfcGVyc29uYWxcIj5cbiAgICA8ZGl2IGNsYXNzPVwidXNlcmNhcmRfbmFtZVwiPlxuICAgICAgPHAgY2xhc3M9XCJwLXRpdGxlXCI+TmFtZTwvcD5cbiAgICAgIDxwPntmaXJzdG5hbWV9IHtsYXN0bmFtZX08L3A+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInVzZXJjYXJkX2VtYWlsXCI+XG4gICAgICA8cCBjbGFzcz1cInAtdGl0bGVcIj5FbWFpbDwvcD5cbiAgICAgIDxwPntlbWFpbH08L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iLCI8c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgXCIuLi9zdHlsZS9wYWdlcy9Ib21lUGFnZS5zY3NzXCI7XG48L3N0eWxlPlxuXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIHNlc3Npb24pIHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5mZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6ODA1NS9pdGVtcy91c2Vyc1wiKTtcblxuICBsZXQgdXNlcnMgPSBhd2FpdCByZXN1bHQuanNvbigpO1xuICB1c2VycyA9IHVzZXJzLmRhdGE7XG4gIC8vIGNvbnNvbGUubG9nKHVzZXJzKTtcbiAgcmV0dXJuIHsgdXNlcnMgfTtcbn1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZ290byB9IGZyb20gXCJAc2FwcGVyL2FwcFwiO1xuaW1wb3J0IGp3dF9kZWNvZGUgZnJvbSBcImp3dC1kZWNvZGVcIjtcblxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b24uc3ZlbHRlXCI7XG5pbXBvcnQgVGl0bGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvVGl0bGUuc3ZlbHRlXCI7XG5pbXBvcnQgVXNlckNhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckNhcmQuc3ZlbHRlXCI7XG5pbXBvcnQgSW1hZ2VVcGxvYWQgZnJvbSBcIi4uL2NvbXBvbmVudHMvSW1hZ2VVcGxvYWQuc3ZlbHRlXCI7XG5pbXBvcnQgeyBjaGVja0F1dGggfSBmcm9tIFwiLi4vcm91dGVzL2F1dGguanNcIjtcbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbi8vIGRlemUgdmFyIGNoZWNrdCBvZiBkZSBnZWJydWlrZXIgaWV0cyBtYWcgemllbiwgdm9vcmFsZWVyIGlldHMgdGUgdG9uZW5cbmxldCBpc0F1dGggPSBmYWxzZTtcbi8vcGFzIG5hZGF0IGRlIHBhZ2luYSBnZW1vdW50IGlzLCBtYWcgZGUgY2hlY2thdXRoIGZ1bmN0aWUgbG9wZW4uIGFuZGVycyBpcyBsb2NhbHN0b3JhZ2UgbmlldCBiZXNjaGlrYmFhci5cbm9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGlzQXV0aCA9IGF3YWl0IGNoZWNrQXV0aChbXCJBZG1pbmlzdHJhdG9yXCJdKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBsZXQgdXNlcnM7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+TGFuZ29uPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbnsjaWYgaXNBdXRoICE9PSBmYWxzZX1cbiAgPGRpdiBjbGFzcz1cImhvbWVcIj5cbiAgICA8ZGl2IGNsYXNzPVwicC1wYWdlc1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImhvbWVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhvbWVfaW50cm9cIj5cbiAgICAgICAgICA8aDE+V2VsY29tZSB0byBMYW5nb24gPGJyIC8+IFJvbWFuaWU8L2gxPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgV2UgZW5zdXJlIHNtb290aDxiciAvPiBjb29wZXJhdGlvbiBhbmQgPGJyIC8+IHByb2Zlc3Npb25hbCB0cmFuc2xhdGlvblxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaG9tZV9idXR0b25cIj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgbGFiZWw9XCJBYm91dCB1c1wiXG4gICAgICAgICAgICAgIGlzTm9ybWFsPVwie3RydWV9XCJcbiAgICAgICAgICAgICAgb246Y2xpY2s9XCJ7KCkgPT4gZ290bygnL2Fib3V0Jyl9XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJob21lX3BpY3R1cmVcIj5cbiAgICAgICAgICA8aW1nIHNyYz1cIi9pbWFnZXMvaG9tZV9waWN0dXJlLmpwZ1wiIGFsdD1cIlwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiaG9tZV91c2Vyc1wiPlxuICAgICAgICA8VGl0bGUgdGV4dD1cIlVzZXJzXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhvbWVfdXNlcmNhcmRcIj5cbiAgICAgICAgICB7I2VhY2ggdXNlcnMgYXMgdXNlcn1cbiAgICAgICAgICAgIDxVc2VyQ2FyZFxuICAgICAgICAgICAgICBmaXJzdG5hbWU9XCJ7dXNlci5maXJzdG5hbWV9XCJcbiAgICAgICAgICAgICAgbGFzdG5hbWU9XCJ7dXNlci5sYXN0bmFtZX1cIlxuICAgICAgICAgICAgICBlbWFpbD1cInt1c2VyLmVtYWlsfVwiPlxuICAgICAgICAgICAgICA8SW1hZ2VVcGxvYWQgLz5cbiAgICAgICAgICAgIDwvVXNlckNhcmQ+XG4gICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgPHA+bG9hZGluZy4uLjwvcD5cbiAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2Plxuey9pZn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBa0JVLEdBQVM7OzBCQUFHLEdBQVE7Ozs7Ozs7d0JBSXBCLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBSkwsR0FBUzs7MENBQUcsR0FBUTs7Ozs7Ozs7Ozs7Ozt3Q0FJcEIsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJFQUpMLEdBQVM7eUVBQUcsR0FBUTtvRUFJcEIsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWpCSixTQUFTO09BQ1QsUUFBUTtPQUNSLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQ2lEUyxJQUFJOzs7Ozs7NEJBV1osR0FBSzs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7O2lCQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQyxHQUFLOzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7O21CQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFFVSxHQUFJLElBQUMsU0FBUzt1QkFDZixHQUFJLElBQUMsUUFBUTtvQkFDaEIsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tFQUZOLEdBQUksSUFBQyxTQUFTO2lFQUNmLEdBQUksSUFBQyxRQUFROzhEQUNoQixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkEzQjNCLEdBQU0sUUFBSyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBQWhCLEdBQU0sUUFBSyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXZDQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87T0FDbkMsTUFBTSxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsbUNBQW1DO0tBRS9ELEtBQUssU0FBUyxNQUFNLENBQUMsSUFBSTtDQUM3QixLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUk7OztVQUVULEtBQUs7Ozs7OztLQWdCWixNQUFNLEdBQUcsS0FBSzs7O0NBRWxCLE9BQU87O21CQUVILE1BQU0sU0FBUyxTQUFTLEVBQUUsZUFBZTtVQUNsQyxHQUFHO0dBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHOzs7O09BSVIsS0FBSzs7Ozs7Ozs2QkFvQmUsSUFBSSxDQUFDLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
