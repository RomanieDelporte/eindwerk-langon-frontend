import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, b as claim_element, f as children, j as claim_text, g as detach_dev, h as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, T as set_input_value, N as listen_dev, o as set_data_dev, L as noop, B as Button, x as goto, z as checkAuth, y as o, w as onMount, r as globals, A as validate_each_argument, I as empty, H as destroy_each, O as binding_callbacks, W as bind, C as create_component, D as claim_component, E as mount_component, X as add_flush_callback, p as transition_in, q as transition_out, G as destroy_component } from './client.33602f97.js';
import { I as Inputfield } from './Inputfield.ce8264f6.js';

/* src/components/PasswordField.svelte generated by Svelte v3.38.1 */

const file$1 = "src/components/PasswordField.svelte";

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let p;
	let t0;
	let t1;
	let div1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			t0 = text(/*label*/ ctx[1]);
			t1 = space();
			div1 = element("div");
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, /*label*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			input = claim_element(div1_nodes, "INPUT", {
				placeholder: true,
				type: true,
				class: true
			});

			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1nhben6");
			add_location(p, file$1, 31, 4, 676);
			attr_dev(div0, "class", "inputfield_label svelte-1nhben6");
			add_location(div0, file$1, 30, 2, 641);
			attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
			attr_dev(input, "type", "password");
			attr_dev(input, "class", "svelte-1nhben6");
			add_location(input, file$1, 34, 4, 737);
			attr_dev(div1, "class", "inputfield_input svelte-1nhben6");
			add_location(div1, file$1, 33, 2, 702);
			attr_dev(div2, "class", "inputfield svelte-1nhben6");
			add_location(div2, file$1, 29, 0, 614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, p);
			append_dev(p, t0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, input);
			set_input_value(input, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1]);

			if (dirty & /*placeholder*/ 4) {
				attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PasswordField", slots, []);
	let { label } = $$props;
	let { placeholder } = $$props;
	let { value } = $$props;
	const writable_props = ["label", "placeholder", "value"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PasswordField> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({ label, placeholder, value });

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, label, placeholder, input_input_handler];
}

class PasswordField extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { label: 1, placeholder: 2, value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PasswordField",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*label*/ ctx[1] === undefined && !("label" in props)) {
			console.warn("<PasswordField> was created without expected prop 'label'");
		}

		if (/*placeholder*/ ctx[2] === undefined && !("placeholder" in props)) {
			console.warn("<PasswordField> was created without expected prop 'placeholder'");
		}

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<PasswordField> was created without expected prop 'value'");
		}
	}

	get label() {
		throw new Error("<PasswordField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<PasswordField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<PasswordField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<PasswordField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<PasswordField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<PasswordField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/login.svelte generated by Svelte v3.38.1 */

const { console: console_1 } = globals;
const file = "src/routes/login.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (122:4) {#if errors}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*errors*/ ctx[2].errors;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errors*/ 4) {
				each_value = /*errors*/ ctx[2].errors;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(122:4) {#if errors}",
		ctx
	});

	return block;
}

// (123:6) {#each errors.errors as error}
function create_each_block(ctx) {
	let p;
	let t_value = /*error*/ ctx[6].message + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 123, 8, 3334);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(123:6) {#each errors.errors as error}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div6;
	let div1;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let p0;
	let t1;
	let t2;
	let div5;
	let h1;
	let t3;
	let t4;
	let div2;
	let inputfield;
	let updating_value;
	let t5;
	let passwordfield;
	let updating_value_1;
	let t6;
	let div3;
	let button;
	let t7;
	let t8;
	let div4;
	let p1;
	let t9;
	let t10;
	let p2;
	let t11;
	let current;

	function inputfield_value_binding(value) {
		/*inputfield_value_binding*/ ctx[4](value);
	}

	let inputfield_props = {
		label: "Email Adress",
		placeholder: "romaniedelporte230@gmail.com"
	};

	if (/*email*/ ctx[0] !== void 0) {
		inputfield_props.value = /*email*/ ctx[0];
	}

	inputfield = new Inputfield({ props: inputfield_props, $$inline: true });
	binding_callbacks.push(() => bind(inputfield, "value", inputfield_value_binding));

	function passwordfield_value_binding(value) {
		/*passwordfield_value_binding*/ ctx[5](value);
	}

	let passwordfield_props = {
		label: "Password",
		placeholder: "test123"
	};

	if (/*password*/ ctx[1] !== void 0) {
		passwordfield_props.value = /*password*/ ctx[1];
	}

	passwordfield = new PasswordField({
			props: passwordfield_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(passwordfield, "value", passwordfield_value_binding));

	button = new Button({
			props: { label: "Sign up" },
			$$inline: true
		});

	button.$on("click", /*login*/ ctx[3]);
	let if_block = /*errors*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div6 = element("div");
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			p0 = element("p");
			t1 = text("i18n your projects");
			t2 = space();
			div5 = element("div");
			h1 = element("h1");
			t3 = text("Sign in");
			t4 = space();
			div2 = element("div");
			create_component(inputfield.$$.fragment);
			t5 = space();
			create_component(passwordfield.$$.fragment);
			t6 = space();
			div3 = element("div");
			create_component(button.$$.fragment);
			t7 = space();
			if (if_block) if_block.c();
			t8 = space();
			div4 = element("div");
			p1 = element("p");
			t9 = text("© 2021 Langon. All rights reserved.");
			t10 = space();
			p2 = element("p");
			t11 = text("Terms off conditions - Privacy policy.");
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true });
			t0 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "i18n your projects");
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			h1 = claim_element(div5_nodes, "H1", {});
			var h1_nodes = children(h1);
			t3 = claim_text(h1_nodes, "Sign in");
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(inputfield.$$.fragment, div2_nodes);
			t5 = claim_space(div2_nodes);
			claim_component(passwordfield.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t6 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(button.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			t7 = claim_space(div5_nodes);
			if (if_block) if_block.l(div5_nodes);
			t8 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			p1 = claim_element(div4_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "© 2021 Langon. All rights reserved.");
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div4_nodes);
			p2 = claim_element(div4_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Terms off conditions - Privacy policy.");
			p2_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/logo_langon.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "logo langon");
			add_location(img, file, 102, 6, 2725);
			attr_dev(p0, "class", "svelte-qayndk");
			add_location(p0, file, 103, 6, 2787);
			attr_dev(div0, "class", "login_logo svelte-qayndk");
			add_location(div0, file, 101, 4, 2694);
			attr_dev(div1, "class", "login_content svelte-qayndk");
			add_location(div1, file, 100, 2, 2662);
			add_location(h1, file, 107, 4, 2866);
			attr_dev(div2, "class", "login_inputs_data");
			add_location(div2, file, 108, 4, 2887);
			attr_dev(div3, "class", "login_inputs_button svelte-qayndk");
			add_location(div3, file, 118, 4, 3175);
			attr_dev(p1, "class", "svelte-qayndk");
			add_location(p1, file, 127, 6, 3425);
			attr_dev(p2, "class", "svelte-qayndk");
			add_location(p2, file, 128, 6, 3474);
			attr_dev(div4, "class", "login_inputs_rights svelte-qayndk");
			add_location(div4, file, 126, 4, 3385);
			attr_dev(div5, "class", "login_inputs svelte-qayndk");
			add_location(div5, file, 106, 2, 2835);
			attr_dev(div6, "class", "login svelte-qayndk");
			add_location(div6, file, 99, 0, 2640);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			append_dev(div6, div1);
			append_dev(div1, div0);
			append_dev(div0, img);
			append_dev(div0, t0);
			append_dev(div0, p0);
			append_dev(p0, t1);
			append_dev(div6, t2);
			append_dev(div6, div5);
			append_dev(div5, h1);
			append_dev(h1, t3);
			append_dev(div5, t4);
			append_dev(div5, div2);
			mount_component(inputfield, div2, null);
			append_dev(div2, t5);
			mount_component(passwordfield, div2, null);
			append_dev(div5, t6);
			append_dev(div5, div3);
			mount_component(button, div3, null);
			append_dev(div5, t7);
			if (if_block) if_block.m(div5, null);
			append_dev(div5, t8);
			append_dev(div5, div4);
			append_dev(div4, p1);
			append_dev(p1, t9);
			append_dev(div4, t10);
			append_dev(div4, p2);
			append_dev(p2, t11);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const inputfield_changes = {};

			if (!updating_value && dirty & /*email*/ 1) {
				updating_value = true;
				inputfield_changes.value = /*email*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			inputfield.$set(inputfield_changes);
			const passwordfield_changes = {};

			if (!updating_value_1 && dirty & /*password*/ 2) {
				updating_value_1 = true;
				passwordfield_changes.value = /*password*/ ctx[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			passwordfield.$set(passwordfield_changes);
			if (/*errors*/ ctx[2]) if_block.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputfield.$$.fragment, local);
			transition_in(passwordfield.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputfield.$$.fragment, local);
			transition_out(passwordfield.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
			destroy_component(inputfield);
			destroy_component(passwordfield);
			destroy_component(button);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Login", slots, []);
	let email = "";
	let password = "";
	let errors;

	const login = async () => {
		//login bij directus
		const res = await fetch("http://localhost:8055/auth/login", {
			method: "POST",
			body: JSON.stringify({ email, password }),
			headers: {
				"Content-type": "application/json",
				Accept: "application/json"
			}
		});

		if (res.status === 200) {
			const parsed = await res.json();
			localStorage.setItem("langon_auth", JSON.stringify(parsed.data));
			const data_langon = o(parsed.data.access_token);
			console.log(data_langon);

			const fetchUser = await fetch("http://localhost:8055/users/" + data_langon.id + "?fields=*id,first_name,last_name,email,role.name,role.id*", {
				headers: {
					Authorization: "Bearer " + parsed.data.access_token,
					Accept: "application/json",
					"Content-type": "application/json"
				}
			});

			console.log(fetchUser);

			if (fetchUser.status === 200) {
				const result = await fetchUser.json();
				console.log(result);
				localStorage.setItem("langon_user", JSON.stringify(result.data));

				//redirect
				goto("/");

				console.log(result);
			} else {
				if (fetchUser.status !== 200) {
					console.log("er is iets fout...");
				}
			}
		}
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Login> was created with unknown prop '${key}'`);
	});

	function inputfield_value_binding(value) {
		email = value;
		$$invalidate(0, email);
	}

	function passwordfield_value_binding(value) {
		password = value;
		$$invalidate(1, password);
	}

	$$self.$capture_state = () => ({
		goto,
		Button,
		Inputfield,
		PasswordField,
		checkAuth,
		jwt_decode: o,
		onMount,
		email,
		password,
		errors,
		login
	});

	$$self.$inject_state = $$props => {
		if ("email" in $$props) $$invalidate(0, email = $$props.email);
		if ("password" in $$props) $$invalidate(1, password = $$props.password);
		if ("errors" in $$props) $$invalidate(2, errors = $$props.errors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		email,
		password,
		errors,
		login,
		inputfield_value_binding,
		passwordfield_value_binding
	];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment.name
		});
	}
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uMjg3YTBiZmEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Bhc3N3b3JkRmllbGQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9sb2dpbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vc3R5bGUvY29tcG9uZW50cy9JbnB1dGZpZWxkLnNjc3NcIjtcbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgbGV0IGxhYmVsO1xuZXhwb3J0IGxldCBwbGFjZWhvbGRlcjtcbi8vIGV4cG9ydCBsZXQgdHlwZTtcbmV4cG9ydCBsZXQgdmFsdWU7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImlucHV0ZmllbGRcIj5cbiAgPGRpdiBjbGFzcz1cImlucHV0ZmllbGRfbGFiZWxcIj5cbiAgICA8cD57bGFiZWx9PC9wPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImlucHV0ZmllbGRfaW5wdXRcIj5cbiAgICA8aW5wdXQgYmluZDp2YWx1ZSBwbGFjZWhvbGRlcj1cIntwbGFjZWhvbGRlcn1cIiB0eXBlPVwicGFzc3dvcmRcIiAvPlxuICA8L2Rpdj5cbjwvZGl2PlxuIiwiPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vc3R5bGUvcGFnZXMvTG9naW5QYWdlLnNjc3NcIjtcbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBnb3RvIH0gZnJvbSBcIkBzYXBwZXIvYXBwXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL0J1dHRvbi5zdmVsdGVcIjtcbmltcG9ydCBJbnB1dGZpZWxkIGZyb20gXCIuLi9jb21wb25lbnRzL0lucHV0ZmllbGQuc3ZlbHRlXCI7XG5pbXBvcnQgUGFzc3dvcmRGaWVsZCBmcm9tIFwiLi4vY29tcG9uZW50cy9QYXNzd29yZEZpZWxkLnN2ZWx0ZVwiO1xuaW1wb3J0IHsgY2hlY2tBdXRoIH0gZnJvbSBcIi4uL3JvdXRlcy9hdXRoLmpzXCI7XG5pbXBvcnQgand0X2RlY29kZSBmcm9tIFwiand0LWRlY29kZVwiO1xuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxubGV0IGVtYWlsID0gXCJcIjtcbmxldCBwYXNzd29yZCA9IFwiXCI7XG5sZXQgZXJyb3JzO1xuXG5jb25zdCBsb2dpbiA9IGFzeW5jICgpID0+IHtcbiAgLy9sb2dpbiBiaWogZGlyZWN0dXNcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwNTUvYXV0aC9sb2dpblwiLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBlbWFpbDogZW1haWwsXG4gICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgfSksXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH0sXG4gIH0pO1xuICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxhbmdvbl9hdXRoXCIsIEpTT04uc3RyaW5naWZ5KHBhcnNlZC5kYXRhKSk7XG4gICAgY29uc3QgZGF0YV9sYW5nb24gPSBqd3RfZGVjb2RlKHBhcnNlZC5kYXRhLmFjY2Vzc190b2tlbik7XG4gICAgY29uc29sZS5sb2coZGF0YV9sYW5nb24pO1xuICAgIGNvbnN0IGZldGNoVXNlciA9IGF3YWl0IGZldGNoKFxuICAgICAgXCJodHRwOi8vbG9jYWxob3N0OjgwNTUvdXNlcnMvXCIgK1xuICAgICAgICBkYXRhX2xhbmdvbi5pZCArXG4gICAgICAgIFwiP2ZpZWxkcz0qaWQsZmlyc3RfbmFtZSxsYXN0X25hbWUsZW1haWwscm9sZS5uYW1lLHJvbGUuaWQqXCIsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIiArIHBhcnNlZC5kYXRhLmFjY2Vzc190b2tlbixcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zb2xlLmxvZyhmZXRjaFVzZXIpO1xuICAgIGlmIChmZXRjaFVzZXIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoVXNlci5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsYW5nb25fdXNlclwiLCBKU09OLnN0cmluZ2lmeShyZXN1bHQuZGF0YSkpO1xuICAgICAgLy9yZWRpcmVjdFxuICAgICAgZ290byhcIi9cIik7XG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmV0Y2hVc2VyLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXIgaXMgaWV0cyBmb3V0Li4uXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibG9naW5cIj5cbiAgPGRpdiBjbGFzcz1cImxvZ2luX2NvbnRlbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibG9naW5fbG9nb1wiPlxuICAgICAgPGltZyBzcmM9XCIvaW1hZ2VzL2xvZ29fbGFuZ29uLnN2Z1wiIGFsdD1cImxvZ28gbGFuZ29uXCIgLz5cbiAgICAgIDxwPmkxOG4geW91ciBwcm9qZWN0czwvcD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJsb2dpbl9pbnB1dHNcIj5cbiAgICA8aDE+U2lnbiBpbjwvaDE+XG4gICAgPGRpdiBjbGFzcz1cImxvZ2luX2lucHV0c19kYXRhXCI+XG4gICAgICA8SW5wdXRmaWVsZFxuICAgICAgICBiaW5kOnZhbHVlPVwie2VtYWlsfVwiXG4gICAgICAgIGxhYmVsPVwiRW1haWwgQWRyZXNzXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJyb21hbmllZGVscG9ydGUyMzBAZ21haWwuY29tXCIgLz5cbiAgICAgIDxQYXNzd29yZEZpZWxkXG4gICAgICAgIGJpbmQ6dmFsdWU9XCJ7cGFzc3dvcmR9XCJcbiAgICAgICAgbGFiZWw9XCJQYXNzd29yZFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwidGVzdDEyM1wiIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImxvZ2luX2lucHV0c19idXR0b25cIj5cbiAgICAgIDxCdXR0b24gbGFiZWw9XCJTaWduIHVwXCIgb246Y2xpY2s9XCJ7bG9naW59XCIgLz5cbiAgICA8L2Rpdj5cbiAgICB7I2lmIGVycm9yc31cbiAgICAgIHsjZWFjaCBlcnJvcnMuZXJyb3JzIGFzIGVycm9yfVxuICAgICAgICA8cD57ZXJyb3IubWVzc2FnZX08L3A+XG4gICAgICB7L2VhY2h9XG4gICAgey9pZn1cbiAgICA8ZGl2IGNsYXNzPVwibG9naW5faW5wdXRzX3JpZ2h0c1wiPlxuICAgICAgPHA+wqkgMjAyMSBMYW5nb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9wPlxuICAgICAgPHA+VGVybXMgb2ZmIGNvbmRpdGlvbnMgLSBQcml2YWN5IHBvbGljeS48L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXSwibmFtZXMiOlsiand0X2RlY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBYVEsR0FBSzs7Ozs7Ozs7Ozs7OztzQ0FBTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQUd1QixHQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VEQUh2QyxHQUFLOzs7bURBR3VC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
