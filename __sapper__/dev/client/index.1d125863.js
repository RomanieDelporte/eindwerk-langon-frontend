import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, V as svg_element, b as claim_element, f as children, g as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, L as noop, A as validate_each_argument, e as element, t as text, a as space, C as create_component, j as claim_text, h as claim_space, D as claim_component, E as mount_component, p as transition_in, q as transition_out, G as destroy_component, F as check_outros, H as destroy_each, K as group_outros } from './client.33602f97.js';
import { T as Title } from './Title.83727d68.js';

/* node_modules/svelte-feather-icons/src/icons/PlusCircleIcon.svelte generated by Svelte v3.38.1 */

const file$2 = "node_modules/svelte-feather-icons/src/icons/PlusCircleIcon.svelte";

function create_fragment$2(ctx) {
	let svg;
	let circle;
	let line0;
	let line1;
	let svg_class_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					fill: true,
					viewBox: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			circle = claim_element(svg_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle).forEach(detach_dev);
			line0 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach_dev);
			line1 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "12");
			attr_dev(circle, "r", "10");
			add_location(circle, file$2, 13, 248, 534);
			attr_dev(line0, "x1", "12");
			attr_dev(line0, "y1", "8");
			attr_dev(line0, "x2", "12");
			attr_dev(line0, "y2", "16");
			add_location(line0, file$2, 13, 288, 574);
			attr_dev(line1, "x1", "8");
			attr_dev(line1, "y1", "12");
			attr_dev(line1, "x2", "16");
			attr_dev(line1, "y2", "12");
			add_location(line1, file$2, 13, 332, 618);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", /*size*/ ctx[0]);
			attr_dev(svg, "height", /*size*/ ctx[0]);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", svg_class_value = "feather feather-plus-circle " + /*customClass*/ ctx[2]);
			add_location(svg, file$2, 13, 0, 286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, circle);
			append_dev(svg, line0);
			append_dev(svg, line1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*size*/ 1) {
				attr_dev(svg, "width", /*size*/ ctx[0]);
			}

			if (dirty & /*size*/ 1) {
				attr_dev(svg, "height", /*size*/ ctx[0]);
			}

			if (dirty & /*strokeWidth*/ 2) {
				attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			}

			if (dirty & /*customClass*/ 4 && svg_class_value !== (svg_class_value = "feather feather-plus-circle " + /*customClass*/ ctx[2])) {
				attr_dev(svg, "class", svg_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PlusCircleIcon", slots, []);
	let { size = "100%" } = $$props;
	let { strokeWidth = 2 } = $$props;
	let { class: customClass = "" } = $$props;

	if (size !== "100%") {
		size = size.slice(-1) === "x"
		? size.slice(0, size.length - 1) + "em"
		: parseInt(size) + "px";
	}

	const writable_props = ["size", "strokeWidth", "class"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PlusCircleIcon> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("class" in $$props) $$invalidate(2, customClass = $$props.class);
	};

	$$self.$capture_state = () => ({ size, strokeWidth, customClass });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("customClass" in $$props) $$invalidate(2, customClass = $$props.customClass);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [size, strokeWidth, customClass];
}

class PlusCircleIcon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { size: 0, strokeWidth: 1, class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PlusCircleIcon",
			options,
			id: create_fragment$2.name
		});
	}

	get size() {
		throw new Error("<PlusCircleIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<PlusCircleIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get strokeWidth() {
		throw new Error("<PlusCircleIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set strokeWidth(value) {
		throw new Error("<PlusCircleIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<PlusCircleIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<PlusCircleIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-feather-icons/src/icons/XIcon.svelte generated by Svelte v3.38.1 */

const file$1 = "node_modules/svelte-feather-icons/src/icons/XIcon.svelte";

function create_fragment$1(ctx) {
	let svg;
	let line0;
	let line1;
	let svg_class_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					fill: true,
					viewBox: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			line0 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach_dev);
			line1 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line0, "x1", "18");
			attr_dev(line0, "y1", "6");
			attr_dev(line0, "x2", "6");
			attr_dev(line0, "y2", "18");
			add_location(line0, file$1, 13, 238, 524);
			attr_dev(line1, "x1", "6");
			attr_dev(line1, "y1", "6");
			attr_dev(line1, "x2", "18");
			attr_dev(line1, "y2", "18");
			add_location(line1, file$1, 13, 281, 567);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", /*size*/ ctx[0]);
			attr_dev(svg, "height", /*size*/ ctx[0]);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", svg_class_value = "feather feather-x " + /*customClass*/ ctx[2]);
			add_location(svg, file$1, 13, 0, 286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, line0);
			append_dev(svg, line1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*size*/ 1) {
				attr_dev(svg, "width", /*size*/ ctx[0]);
			}

			if (dirty & /*size*/ 1) {
				attr_dev(svg, "height", /*size*/ ctx[0]);
			}

			if (dirty & /*strokeWidth*/ 2) {
				attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			}

			if (dirty & /*customClass*/ 4 && svg_class_value !== (svg_class_value = "feather feather-x " + /*customClass*/ ctx[2])) {
				attr_dev(svg, "class", svg_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("XIcon", slots, []);
	let { size = "100%" } = $$props;
	let { strokeWidth = 2 } = $$props;
	let { class: customClass = "" } = $$props;

	if (size !== "100%") {
		size = size.slice(-1) === "x"
		? size.slice(0, size.length - 1) + "em"
		: parseInt(size) + "px";
	}

	const writable_props = ["size", "strokeWidth", "class"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<XIcon> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("class" in $$props) $$invalidate(2, customClass = $$props.class);
	};

	$$self.$capture_state = () => ({ size, strokeWidth, customClass });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("customClass" in $$props) $$invalidate(2, customClass = $$props.customClass);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [size, strokeWidth, customClass];
}

class XIcon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { size: 0, strokeWidth: 1, class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "XIcon",
			options,
			id: create_fragment$1.name
		});
	}

	get size() {
		throw new Error("<XIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<XIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get strokeWidth() {
		throw new Error("<XIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set strokeWidth(value) {
		throw new Error("<XIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<XIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<XIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/settings/translators/index.svelte generated by Svelte v3.38.1 */
const file = "src/routes/settings/translators/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (44:6) {#each translators as translator}
function create_each_block(ctx) {
	let div1;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2_value = /*translator*/ ctx[1].translator + "";
	let t2;
	let t3;
	let p2;
	let t4;
	let t5;
	let p3;
	let t6_value = /*translator*/ ctx[1].Languages + "";
	let t6;
	let t7;
	let xicon;
	let t8;
	let div0;
	let pluscircleicon;
	let t9;
	let current;
	xicon = new XIcon({ props: { size: "15" }, $$inline: true });
	pluscircleicon = new PlusCircleIcon({ props: { size: "34" }, $$inline: true });

	const block = {
		c: function create() {
			div1 = element("div");
			p0 = element("p");
			t0 = text("Translator:");
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p2 = element("p");
			t4 = text("languages:");
			t5 = space();
			p3 = element("p");
			t6 = text(t6_value);
			t7 = space();
			create_component(xicon.$$.fragment);
			t8 = space();
			div0 = element("div");
			create_component(pluscircleicon.$$.fragment);
			t9 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p0 = claim_element(div1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Translator:");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			p2 = claim_element(div1_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, "languages:");
			p2_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			p3 = claim_element(div1_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t6 = claim_text(p3_nodes, t6_value);
			t7 = claim_space(p3_nodes);
			claim_component(xicon.$$.fragment, p3_nodes);
			p3_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(pluscircleicon.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-xbp6tu");
			add_location(p0, file, 45, 10, 1172);
			attr_dev(p1, "class", "svelte-xbp6tu");
			add_location(p1, file, 46, 10, 1201);
			attr_dev(p2, "class", "svelte-xbp6tu");
			add_location(p2, file, 47, 10, 1242);
			attr_dev(p3, "class", "translators_language borderline svelte-xbp6tu");
			add_location(p3, file, 48, 10, 1270);
			attr_dev(div0, "class", "translators_add svelte-xbp6tu");
			add_location(div0, file, 52, 10, 1406);
			attr_dev(div1, "class", "translators_content borderline svelte-xbp6tu");
			add_location(div1, file, 44, 8, 1117);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, p0);
			append_dev(p0, t0);
			append_dev(div1, t1);
			append_dev(div1, p1);
			append_dev(p1, t2);
			append_dev(div1, t3);
			append_dev(div1, p2);
			append_dev(p2, t4);
			append_dev(div1, t5);
			append_dev(div1, p3);
			append_dev(p3, t6);
			append_dev(p3, t7);
			mount_component(xicon, p3, null);
			append_dev(div1, t8);
			append_dev(div1, div0);
			mount_component(pluscircleicon, div0, null);
			append_dev(div1, t9);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(xicon.$$.fragment, local);
			transition_in(pluscircleicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(xicon.$$.fragment, local);
			transition_out(pluscircleicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(xicon);
			destroy_component(pluscircleicon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(44:6) {#each translators as translator}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let title;
	let t0;
	let div1;
	let p;
	let t1;
	let t2;
	let div0;
	let current;

	title = new Title({
			props: { text: "Your Settings" },
			$$inline: true
		});

	let each_value = /*translators*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div2 = element("div");
			create_component(title.$$.fragment);
			t0 = space();
			div1 = element("div");
			p = element("p");
			t1 = text("All the translators with their assigned languages");
			t2 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(title.$$.fragment, div2_nodes);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "All the translators with their assigned languages");
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 41, 4, 965);
			attr_dev(div0, "class", "translators_input placeInput svelte-xbp6tu");
			add_location(div0, file, 42, 4, 1026);
			attr_dev(div1, "class", "translators_translator");
			add_location(div1, file, 40, 2, 924);
			attr_dev(div2, "class", "translators marginSet");
			add_location(div2, file, 38, 0, 853);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			mount_component(title, div2, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, p);
			append_dev(p, t1);
			append_dev(div1, t2);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*translators*/ 1) {
				each_value = /*translators*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(title);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Translators", slots, []);

	const translators = [
		{
			id: 1,
			translator: "Max Doe",
			Languages: "Dutch"
		},
		{
			id: 2,
			translator: "Dirk Doe",
			Languages: "Dutch"
		}
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Translators> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Title,
		XIcon,
		PlusCircleIcon,
		translators
	});

	return [translators];
}

class Translators extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Translators",
			options,
			id: create_fragment.name
		});
	}
}

export default Translators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWQxMjU4NjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtZmVhdGhlci1pY29ucy9zcmMvaWNvbnMvUGx1c0NpcmNsZUljb24uc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1mZWF0aGVyLWljb25zL3NyYy9pY29ucy9YSWNvbi5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3NldHRpbmdzL3RyYW5zbGF0b3JzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IHNpemUgPSBcIjEwMCVcIjtcbiAgZXhwb3J0IGxldCBzdHJva2VXaWR0aCA9IDI7XG4gIGxldCBjdXN0b21DbGFzcyA9IFwiXCI7XG4gIGV4cG9ydCB7IGN1c3RvbUNsYXNzIGFzIGNsYXNzIH07XG5cbiAgaWYgKHNpemUgIT09IFwiMTAwJVwiKSB7XG4gICAgc2l6ZSA9IHNpemUuc2xpY2UoLTEpID09PSAneCcgXG4gICAgICAgICAgPyBzaXplLnNsaWNlKDAsIHNpemUubGVuZ3RoIC0xKSArICdlbSdcbiAgICAgICAgICA6IHBhcnNlSW50KHNpemUpICsgJ3B4JztcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPXtzaXplfSBoZWlnaHQ9e3NpemV9IGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCJ7c3Ryb2tlV2lkdGh9XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJmZWF0aGVyIGZlYXRoZXItcGx1cy1jaXJjbGUge2N1c3RvbUNsYXNzfVwiPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIj48L2NpcmNsZT48bGluZSB4MT1cIjEyXCIgeTE9XCI4XCIgeDI9XCIxMlwiIHkyPVwiMTZcIj48L2xpbmU+PGxpbmUgeDE9XCI4XCIgeTE9XCIxMlwiIHgyPVwiMTZcIiB5Mj1cIjEyXCI+PC9saW5lPjwvc3ZnPlxuIiwiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBzaXplID0gXCIxMDAlXCI7XG4gIGV4cG9ydCBsZXQgc3Ryb2tlV2lkdGggPSAyO1xuICBsZXQgY3VzdG9tQ2xhc3MgPSBcIlwiO1xuICBleHBvcnQgeyBjdXN0b21DbGFzcyBhcyBjbGFzcyB9O1xuXG4gIGlmIChzaXplICE9PSBcIjEwMCVcIikge1xuICAgIHNpemUgPSBzaXplLnNsaWNlKC0xKSA9PT0gJ3gnIFxuICAgICAgICAgID8gc2l6ZS5zbGljZSgwLCBzaXplLmxlbmd0aCAtMSkgKyAnZW0nXG4gICAgICAgICAgOiBwYXJzZUludChzaXplKSArICdweCc7XG4gIH1cbjwvc2NyaXB0PlxuXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD17c2l6ZX0gaGVpZ2h0PXtzaXplfSBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwie3N0cm9rZVdpZHRofVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwiZmVhdGhlciBmZWF0aGVyLXgge2N1c3RvbUNsYXNzfVwiPjxsaW5lIHgxPVwiMThcIiB5MT1cIjZcIiB4Mj1cIjZcIiB5Mj1cIjE4XCI+PC9saW5lPjxsaW5lIHgxPVwiNlwiIHkxPVwiNlwiIHgyPVwiMThcIiB5Mj1cIjE4XCI+PC9saW5lPjwvc3ZnPlxuIiwiPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vLi4vLi4vc3R5bGUvZWxlbWVudHMvVHJhbnNsYXRvcnMuc2Nzc1wiO1xuPC9zdHlsZT5cblxuPHNjcmlwdD5cbmltcG9ydCBUaXRsZSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9UaXRsZS5zdmVsdGVcIjtcbmltcG9ydCB7IFhJY29uLCBQbHVzQ2lyY2xlSWNvbiB9IGZyb20gXCJzdmVsdGUtZmVhdGhlci1pY29uc1wiO1xuXG5jb25zdCB0cmFuc2xhdG9ycyA9IFtcbiAgeyBpZDogMSwgdHJhbnNsYXRvcjogXCJNYXggRG9lXCIsIExhbmd1YWdlczogXCJEdXRjaFwiIH0sXG4gIHsgaWQ6IDIsIHRyYW5zbGF0b3I6IFwiRGlyayBEb2VcIiwgTGFuZ3VhZ2VzOiBcIkR1dGNoXCIgfSxcbl07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInRyYW5zbGF0b3JzIG1hcmdpblNldFwiPlxuICA8VGl0bGUgdGV4dD1cIllvdXIgU2V0dGluZ3NcIiAvPlxuICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRvcnNfdHJhbnNsYXRvclwiPlxuICAgIDxwPkFsbCB0aGUgdHJhbnNsYXRvcnMgd2l0aCB0aGVpciBhc3NpZ25lZCBsYW5ndWFnZXM8L3A+XG4gICAgPGRpdiBjbGFzcz1cInRyYW5zbGF0b3JzX2lucHV0IHBsYWNlSW5wdXRcIj5cbiAgICAgIHsjZWFjaCB0cmFuc2xhdG9ycyBhcyB0cmFuc2xhdG9yfVxuICAgICAgICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRvcnNfY29udGVudCBib3JkZXJsaW5lXCI+XG4gICAgICAgICAgPHA+VHJhbnNsYXRvcjo8L3A+XG4gICAgICAgICAgPHA+e3RyYW5zbGF0b3IudHJhbnNsYXRvcn08L3A+XG4gICAgICAgICAgPHA+bGFuZ3VhZ2VzOjwvcD5cbiAgICAgICAgICA8cCBjbGFzcz1cInRyYW5zbGF0b3JzX2xhbmd1YWdlIGJvcmRlcmxpbmVcIj5cbiAgICAgICAgICAgIHt0cmFuc2xhdG9yLkxhbmd1YWdlc31cbiAgICAgICAgICAgIDxYSWNvbiBzaXplPVwiMTVcIiAvPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRvcnNfYWRkXCI+XG4gICAgICAgICAgICA8UGx1c0NpcmNsZUljb24gc2l6ZT1cIjM0XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FhK0MsR0FBSTtvQ0FBVSxHQUFJOzs7O2lEQUF3RSxHQUFXOzs7NkZBQXNGLEdBQVc7Ozs7Ozs7Ozs7O29DQUF0TSxHQUFJOzs7O3FDQUFVLEdBQUk7Ozs7a0RBQXdFLEdBQVc7Ozs0SEFBc0YsR0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQVp4TyxJQUFJLEdBQUcsTUFBTTtPQUNiLFdBQVcsR0FBRyxDQUFDO2NBQ3RCLFdBQVcsR0FBRyxFQUFFOztLQUdoQixJQUFJLEtBQUssTUFBTTtFQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sR0FBRztJQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFFLENBQUMsSUFBSSxJQUFHO0lBQ25DLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0NJYyxHQUFJO29DQUFVLEdBQUk7Ozs7aURBQXdFLEdBQVc7OzttRkFBNEUsR0FBVzs7Ozs7Ozs7OztvQ0FBNUwsR0FBSTs7OztxQ0FBVSxHQUFJOzs7O2tEQUF3RSxHQUFXOzs7a0hBQTRFLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FaOU4sSUFBSSxHQUFHLE1BQU07T0FDYixXQUFXLEdBQUcsQ0FBQztjQUN0QixXQUFXLEdBQUcsRUFBRTs7S0FHaEIsSUFBSSxLQUFLLE1BQU07RUFDakIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEdBQUc7SUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRSxDQUFDLElBQUksSUFBRztJQUNuQyxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkNhbkIsR0FBVSxJQUFDLFVBQVU7Ozs7Ozs7K0JBR3RCLEdBQVUsSUFBQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQU5wQixHQUFXOzs7O2dDQUFoQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQUFDLEdBQVc7Ozs7K0JBQWhCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FYTixXQUFXOztHQUNiLEVBQUUsRUFBRSxDQUFDO0dBQUUsVUFBVSxFQUFFLFNBQVM7R0FBRSxTQUFTLEVBQUUsT0FBTzs7O0dBQ2hELEVBQUUsRUFBRSxDQUFDO0dBQUUsVUFBVSxFQUFFLFVBQVU7R0FBRSxTQUFTLEVBQUUsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
